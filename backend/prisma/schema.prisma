generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id             String   @id @default(cuid())
    email          String   @unique
    passwordHash   String   @map("password_hash")
    firstName      String?  @map("first_name")
    lastName       String?  @map("last_name")
    nativeLanguage String   @map("native_language")
    profilePicture String?  @map("profile_picture")
    createdAt      DateTime @default(now()) @map("created_at")
    updatedAt      DateTime @updatedAt @map("updated_at")

    conversations Conversation[]
    userProgress  UserProgress[]

    @@map("users")
}

model Language {
    id         String  @id @default(cuid())
    code       String  @unique // e.g., "en", "es", "fr"
    name       String // e.g., "English", "Spanish", "French"
    nativeName String  @map("native_name") // e.g., "English", "Español", "Français"
    isActive   Boolean @default(true) @map("is_active")

    conversations Conversation[]
    userProgress  UserProgress[]

    @@map("languages")
}

model ConversationType {
    id              String  @id @default(cuid())
    name            String  @unique
    description     String
    difficultyLevel Int     @map("difficulty_level") // 1-5
    isActive        Boolean @default(true) @map("is_active")

    conversations Conversation[]

    @@map("conversation_types")
}

model Conversation {
    id              String             @id @default(cuid())
    userId          String             @map("user_id")
    languageId      String             @map("language_id")
    typeId          String             @map("type_id")
    status          ConversationStatus @default(ACTIVE)
    startedAt       DateTime           @default(now()) @map("started_at")
    endedAt         DateTime?          @map("ended_at")
    durationSeconds Int?               @map("duration_seconds")

    user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    language Language         @relation(fields: [languageId], references: [id])
    type     ConversationType @relation(fields: [typeId], references: [id])

    transcripts ConversationTranscript[]

    @@map("conversations")
}

model ConversationTranscript {
    id             String   @id @default(cuid())
    conversationId String   @map("conversation_id")
    speaker        Speaker // USER or AI
    originalText   String   @map("original_text")
    translatedText String?  @map("translated_text")
    timestamp      DateTime @default(now())
    audioUrl       String?  @map("audio_url")

    conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

    @@map("conversation_transcripts")
}

model UserProgress {
    id                   String    @id @default(cuid())
    userId               String    @map("user_id")
    languageId           String    @map("language_id")
    sessionsCount        Int       @default(0) @map("sessions_count")
    totalDurationMinutes Int       @default(0) @map("total_duration_minutes")
    currentStreak        Int       @default(0) @map("current_streak")
    longestStreak        Int       @default(0) @map("longest_streak")
    lastSessionAt        DateTime? @map("last_session_at")
    createdAt            DateTime  @default(now()) @map("created_at")
    updatedAt            DateTime  @updatedAt @map("updated_at")

    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    language Language @relation(fields: [languageId], references: [id])

    @@unique([userId, languageId])
    @@map("user_progress")
}

enum ConversationStatus {
    ACTIVE
    COMPLETED
    PAUSED
    CANCELLED
}

enum Speaker {
    USER
    AI
}
